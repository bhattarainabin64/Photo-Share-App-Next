name: Build and deploy Node.js app to Azure Web App - PhotoShareNext

on:
  push:
    branches:
      - master
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20.x'

      - name: Install dependencies and build
        run: |
          npm install
          npm run build
          npm prune --production

      - name: Prepare deployment package
        run: |
          mkdir -p deploy
          cp -r .next deploy/.next
          cp -r public deploy/public
          cp -r node_modules deploy/node_modules
          cp package.json deploy/
          cp -r .env.local deploy/.env.local || true

      - name: Zip deployment package
        run: |
          cd deploy
          zip -r ../release.zip .

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: node-app
          path: release.zip

  deploy:
    runs-on: ubuntu-latest
    needs: build
    environment:
      name: 'Production'
      url: ${{ steps.deploy-to-webapp.outputs.webapp-url }}

    steps:
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: node-app

      - name: Unzip artifact
        run: unzip release.zip

      - name: Deploy to Azure Web App
        id: deploy-to-webapp
        uses: azure/webapps-deploy@v3
        with:
          app-name: 'PhotoShareNext'
          slot-name: 'Production'
          package: .
          publish-profile: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE }}

      - name: Restart Azure Web App (optional)
        run: |
          az login --service-principal -u ${{ secrets.AZURE_CLIENT_ID }} -p ${{ secrets.AZURE_CLIENT_SECRET }} --tenant ${{ secrets.AZURE_TENANT_ID }}
          az webapp restart --name PhotoShareNext --resource-group DefaultResourceGroup-CCAN
        if: ${{ always() }}
